"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import os

# the current project home directory
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1%1=)3x)36h6#v6ij745g$g@h8xp+x(u@3@5f_8hdlx9)xp_h5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    # Django authentication system
    # identify users, allow them to log in, log out and change password and others.
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'debug_toolbar',
    'django_filters',
    # the name of the library is not the same as the name of the app
    'rest_framework',
    'djoser',
    'corsheaders',

    'playground',
    'store',
    'tags',
    'likes',

    'core',
]

# Middleware is a function that takes a request and either passes that request
# to the next middleware or return a response, each middleware can take the request
# and add something to it.
MIDDLEWARE = [
    # the order matters
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # read the user information from the request and
    # set the user attributes on the request object
    # for example, the request.user will be either set to be an instance of
    # the anonymous user class or an actual user object.
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'storefront.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# when ALLOWED_HOSTS is empty, the project serve hosts against default values
# when specified, only serve the allowed hosts
# just simply match the host in the request against the list
ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '0.0.0.0',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8001',
    'http://127.0.0.1:8001',
]

# https://www.fomfus.com/articles/how-to-use-ip-ranges-for-django-s-internal_ips-setting/
# INTERNAL_IPS is a Django setting that works as a "security" filter,
# allowing Django to know whether it is OK (or not) to disclose sensitive
# information within its requests and Debug information output.
# It is also used by other modules, most notably Django Debug Toolbar to know
# if it is OK to show up.
INTERNAL_IPS = [
    # ...
    "10.0.2.2",
    # ...
]

WSGI_APPLICATION = 'storefront.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # 'NAME': 'storefront',
        'NAME': 'storefront',
        'HOST': '0.0.0.0',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'yourpassword',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# these are the files that are bundled with our applications

STATIC_URL = '/static/'

# media refers to user uploaded files
# the endpoint to expose the media files
MEDIA_URL = '/media/'
# where the media files are stored in the file system
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

REST_FRAMEWORK = {
    # stop the DRF from converting decimal to string when serializing objects
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ]
    # the default permission class is AllowAny,
    # we set the default permission to IsAuthenticated, all API endpoints are
    # now closed for anonymous users.
    # we can supply a list of permission classes, if any fails, the client
    # would be able to access that views

}

# specific settings for rest framework simplejwt
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    # JWT should be the prefix for the authorization header
    'ACCESS_TOKEN_LIFETIME': timedelta(days=180),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=360),
}

AUTH_USER_MODEL = 'core.User'

DJOSER = {
    'SERIALIZERS': {
        'user_create': 'core.serializers.UserCreateSerializer',
        'current_user': 'core.serializers.UserSerializer',
    }
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = '10.0.2.2'
EMAIL_PORT = 2525

EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
# the fake server doesn't have a user and password, leave it empty
# password saved here is unsafe, should use environment variable in production
DEFAULT_FROM_EMAIL = 'from@shopping.com'
# set site admins for send_admins,
# a list of tuples, each tuple (name, email)
ADMINS = [
    ('admin1', 'admin1@shopping.com'),
    ('admin2', 'admin2@shopping.com'),
]
# for smtp4dev,
# admin interface: host machine port 3000 -> docker port 80
# server: host machine port 2525 -> docker port 25


# for celery configurations

# setting the broker for the application and celery
# this setting means app -> redis -> celery
# intuitively only set redis -> celery, but actually also set app -> redis
# these are the settings inserted by celery
# to instruct the flow of messages from application to redis
# we can think message broker is part of celery system
# we just separate redis to running in docker, it should be a
# required running process for celery system.
CELERY_BROKER_URL = 'redis://10.0.2.2:6379/1'

CELERY_BEAT_SCHEDULE = {
    'notify_customers': {
        'task': 'playground.tasks.notify_customers',
        # every Monday 7:30
        # 'schedule': crontab(day_of_week=1, hour=7, minute=30)
        # every 15 minutes
        # 'schedule': crontab(minute='*/15')
        'schedule': 5,
        'args': ['Hello world'],
        'kwargs': {},

    }
}

